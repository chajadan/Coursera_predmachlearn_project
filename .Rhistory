install.packages("knitr")
getwd()
x = data.frame(a = c(1,2,3,4), b = c(10,10,10,10), c = c("one","one", "two", "three"))
x
boxplot(a ~ c, data = x)
?par
par("fin")
par("fin") <- c(10, 20)
par("fin" = c(10, 20))
?barplot
?aggregate
?order
?sort
?dotchart
?barplot
?par
?barplot
?par
?title
?mtext
?layout
?text
matrix(c(1,2),1,2,byrow=TRUE)
rep(1,3)
a = c(1,2,3)
b = c(4,5,6)
a * b
?axis
ls()
testingOrig = read.csv("pml-testing.csv")
trainingOrig = read.csv("pml-training.csv")
training <- trainingOrig
training$classe = as.integer(training$classe)
setwd("C:/Users/Luis/Desktop/charlie/edu/Coursera/Practical Machine Learning/project")
testingOrig = read.csv("pml-testing.csv")
trainingOrig = read.csv("pml-training.csv")
training <- trainingOrig
training$classe = as.integer(training$classe)
dir()
testingOrig = read.csv("pml-testing.csv")
trainingOrig = read.csv("pml-training.csv")
training <- trainingOrig
training$classe = as.integer(training$classe)
library(caret)
nsv <- nearZeroVal(training, saveMetrics=TRUE)
nsv <- nearZeroVar(training, saveMetrics=TRUE)
nsv
ls()
cor(training)
cor(training[,8:12])
name(getModelInfo())
names(getModelInfo())
M <- abs(cor(training[,-160]))
class(training[,10:15])
class(training[,10])
class(training[,11])
class(training[,12])
class(training[,13])
class(training[,14])
class(training[,15])
names(training)
gyrosinds <- grep("^gyros_", names(training))
gyrosinds
M <- abs(cor(training[,gyrosinds]))
diag(M) <- 0
which(M > 0.8, arr.ind=T)
M
plot(training[,60],training[,61])
plot(training[,152],training[,153])
max(training[,152])
mean(training[,152])
quantile(training[,152])
which(training[,152] == 311)
plot(training[,113],training[,115])
min(training[,113])
which(training[,113] == -204)
plot(training[,113],training[,153])
plot(training[,115],training[,153])
nsv
quantile(training[,"max_yaw_belt"])
quantile(training[,115])
a = table.frame(x = c(1,2), y = c(3,4))
a = data.frame(x = c(1,2), y = c(3,4))
a
b <- subset(a, a$x != 4)
b
b <- subset(a, a$x == 4)
x
b
b <- subset(a, a$y != 4)
b
b <- subset(a, a$y == 4)
x
b
which(M > 0.8, arr.ind=T)
c(4,5,7,9,11,12)
a <- c(4,5,7,9,11,12)
b <- c(60, 61, 113, 115, 152, 153)
plot(training[,113],training[,153])
plot(training[,115],training[,153])
plot(training[,152],training[,153])
training2 <- subset(training, training["gyros_forearm_y"] != 311)
M <- abs(cor(training2[,gyrosinds]))
diag(M) <- 0
which(M > 0.8, arr.ind=T)
plot(training[,60],training[,61])
pc <- princomp(training)
pc <- princomp(training[,-160])
excludeInds <- integer()
for (i in 1:ncol(training)) {
if (!is.na(summary(training[[i]])["NA's"])) {
excludeInds <- c(excludeInds, i)
}
else if (!is.na(summary(training[[i]])["#DIV/0!"])) {
excludeInds <- c(excludeInds, i)
}
}
excludeInds <- c(1:7, excludeInds, 91)
excludeInds
trainingFobs <- training[,-excludeInds]
trainingFobs2 <- subset(trainingFobs, trainingFobs["gyros_forearm_y"] != 311)
nrow(trainingFobs) - nrow(trainingFobs2)
names(trainingFobs2)
princomp(trainingFobs2[,-53])
pc <- princomp(trainingFobs2[,-53])
names(pc)
pc$sdev
sum(pc$sdev)
pc$sdev / sum(pc$sdev)
round(pc$sdev / sum(pc$sdev), 2)
cumsum(round(pc$sdev / sum(pc$sdev), 2))
M <- abs(cor(trainingFobs2))
diag(M) <- 0
which(M > 0.8, arr.ind=T)
table(trainingFobs$classe)
plot(trainingFobs2$gyros_dumbbell_x, trainingFobs2$gyros_dumbbell_y, col = trainingFobs2$classe)
plot(trainingFobs2$gyros_dumbbell_x, trainingFobs2$gyros_dumbbell_z, col = trainingFobs2$classe)
plot(trainingFobs2$gyros_dumbbell_y, trainingFobs2$gyros_dumbbell_z, col = trainingFobs2$classe)
plot(trainingFobs2$gyros_dumbbell_x, trainingFobs2$gyros_dumbbell_y, col = trainingFobs2$classe)
plot(trainingFobs2$gyros_dumbbell_y, trainingFobs2$gyros_dumbbell_z, col = trainingFobs2$classe)
boxplot(trainingFobs2[,1:5])
boxplot(trainingFobs2[,c(2,4,5)])
boxplot(trainingFobs2$gyros_belt_x
)
boxplot(trainingFobs2[,1:5])
boxplot(trainingFobs2[,1])
boxplot(trainingFobs2[,2])
boxplot(trainingFobs2[,3])
boxplot(trainingFobs2[,4])
boxplot(trainingFobs2[,5])
quantile(trainingFobs2[,5])
quantile(trainingFobs2[,5], c(10,90))
quantile(trainingFobs2[,5], c(0.1,0.9))
quantile(trainingFobs2[,5], c(0.025,0.975))
sub(trainingFobs2[,5] > 0.3)
sum(trainingFobs2[,5] > 0.3)
nzv <- NearZeroVar(trainingFobs2)
library(caret)
nzv <- NearZeroVar(trainingFobs2)
apropos("zero")
nzv <- nearZeroVar(trainingFobs2)
nzv
which(M > 0.8, arr.ind=T)
which(M > 0.9, arr.ind=T)
which(M > 0.95, arr.ind=T)
M
dim(M)
sort(M)
which(M > 0.99, arr.ind=T)
names(trainingFobs2)
which(M > 0.99, arr.ind=T)
plot(trainingFobs2$accel_belt_z, trainingFobs2$roll_belt)
im <- influence.measures(tariningFobs2)
which(M > 0.98, arr.ind=T)
plot(trainingFobs2$total_accel_belt, trainingFobs2$roll_belt)
which(M > 0.8, arr.ind=T)
names(getModelInfo())
samplePer <- function(obs, num) {
counts <- integer()
lst <- split(obs, obs$classe)
for (i in 1:length(lst)) {
counts <- c(counts, nrow(lst[[i]]))
}
ends <- cumsum(counts)
ends <- c(0, ends)
sampleInds <- integer()
for (i in 1:(length(ends) - 1)) {
sampleInds <- c(sampleInds, sample((ends[i]+1):ends[i+1], num))
}
sampleInds
}
missClass <- function(values, predictions) {
sum(round(predictions + 0.01) != values) / length(values)
}
2 + 2
fit_all_lda_F100Per <- train(classe ~ ., data = trainingFobs2[samplePer(trainingFobs2, 100),], method = "lda")
class(trainingFobs2$classe)
fit_all_lda_F100Per <- train(classe ~ ., data = trainingFobs2[samplePer(trainingFobs2, 100),c(1:5, 53)], method = "lda")
names(trainingFobs2)
plot(trainingFobs2$gyros_dumbbell_x, trainingFobs2$accel_forearm_x, col = trainingFobs2$classe)
hist(trainingFobs2$gyros_dumbbell_x)
hist(trainingFobs2$gyros_dumbbell_y)
hist(trainingFobs2$gyros_dumbbell_z)
hist(trainingFobs2)
hist(trainingFobs2[[1]])
hist(trainingFobs2[[2]])
hist(trainingFobs2[[3]])
hist(trainingFobs2[[4]])
hist(trainingFobs2[[5]])
hist(trainingFobs2[[6]])
hist(trainingFobs2[[7]])
hist(trainingFobs2[[8]])
hist(trainingFobs2[[9]])
hist(trainingFobs2[[10]])
hist(trainingFobs2[[11]])
hist(trainingFobs2[[12]])
hist(trainingFobs2[[13]])
hist(trainingFobs2[[14]])
hist(trainingFobs2[[15]])
hist(trainingFobs2[[16]])
hist(trainingFobs2[[17]])
hist(trainingFobs2[[18]])
hist(trainingFobs2[[19]])
hist(trainingFobs2[[20]])
hist(trainingFobs2[[21]])
hist(trainingFobs2[[22]])
hist(trainingFobs2[[23]])
hist(trainingFobs2[[24]])
x <- 25
hist(trainingFobs2[[x]])
x <- x + 1
x
hist(trainingFobs2[[x]])
x <- x + 1
hist(trainingFobs2[[x]])
x <- x + 1
hist(trainingFobs2[[x]])
x <- x + 1
hist(trainingFobs2[[x]])
x <- x + 1
hist(trainingFobs2[[x]])
x <- x + 1
hist(trainingFobs2[[x]])
x <- x + 1
hist(trainingFobs2[[x]])
x <- x + 1
hist(trainingFobs2[[x]])
x <- x + 1
hist(trainingFobs2[[x]])
x <- x + 1
hist(trainingFobs2[[x]])
barplot(trainingFobs2[[x]])
barplot(trainingFobs2[[x]], col = trainingFobs2$classe)
hist(trainingFobs2[[x]], col = trainingFobs2$classe)
boxplot(trainingFobs2[[x]], col = trainingFobs2$classe)
plot(trainingFobs2[[x]], col = trainingFobs2$classe)
plot(trainingFobs2[[1]], col = trainingFobs2$classe)
x <- 1
x <- x + 1
plot(trainingFobs2[[2]], col = trainingFobs2$classe)
x <- x + 1
plot(trainingFobs2[[2]], col = trainingFobs2$classe)
plot(trainingFobs2[[x]], col = trainingFobs2$classe)
x <- x + 1
plot(trainingFobs2[[x]], col = trainingFobs2$classe)
x <- x + 1
plot(trainingFobs2[[x]], col = trainingFobs2$classe)
x <- x + 1
plot(trainingFobs2[[x]], col = trainingFobs2$classe)
x <- x + 1
plot(trainingFobs2[[x]], col = trainingFobs2$classe)
x <- x + 1
plot(trainingFobs2[[x]], col = trainingFobs2$classe)
x <- x + 1
plot(trainingFobs2[[x]], col = trainingFobs2$classe)
x <- x + 1
plot(trainingFobs2[[x]], col = trainingFobs2$classe)
x <- x + 1
plot(trainingFobs2[[x]], col = trainingFobs2$classe)
x <- x + 1
plot(trainingFobs2[[x]], col = trainingFobs2$classe)
x <- x + 1
plot(trainingFobs2[[x]], col = trainingFobs2$classe)
x <- x + 1
plot(trainingFobs2[[x]], col = trainingFobs2$classe)
x <- x + 1
plot(trainingFobs2[[x]], col = trainingFobs2$classe)
x <- x + 1
plot(trainingFobs2[[x]], col = trainingFobs2$classe)
x <- x + 1
plot(trainingFobs2[[x]], col = trainingFobs2$classe)
x <- x + 1
plot(trainingFobs2[[x]], col = trainingFobs2$classe)
x <- x + 1
plot(trainingFobs2[[x]], col = trainingFobs2$classe)
x <- x + 1
plot(trainingFobs2[[x]], col = trainingFobs2$classe)
x <- x + 1
plot(trainingFobs2[[x]], col = trainingFobs2$classe)
x <- x + 1
plot(trainingFobs2[[x]], col = trainingFobs2$classe)
names(testing)
ls()
names(testingOrig)
table(testingOrig$username)
table(testingOrig$user_name)
table(trainingFobs2$user_name)
table(trainingOrig$user_name)
class(trainingOrig$user_name)
summary(trainingOrig)
nrow(trainingOrig)
names(testingOrig)[1:7]
hist(testingOrig$new_window)
hist(testingOrig$nuw_window)
hist(unclass(testingOrig$nuw_window)
)
table(testingOrig$nuw_window)
testingOrig$nuw_window
trainingOrig$nuw_window
trainingOrig$num_window
testingOrig$num_window
trainingOrig$num_window
table(testingOrig$num_window)
table(trainingOrig$num_window)
names(trainingOrig)[1:7]
plot(trainingFobs2[[x]], col = trainingFobs2$classe)
plot(trainingOrig[[x]], col = trainingOrig$user_name)
plot(trainingOrig[[10]], col = trainingOrig$user_name)
plot(trainingOrig[[11]], col = trainingOrig$user_name)
plot(trainingOrig[[12]], col = trainingOrig$user_name)
plot(trainingOrig[[13]], col = trainingOrig$user_name)
plot(trainingOrig[[14]], col = trainingOrig$user_name)
trainingFobs3 <- trainingFobs2
trainingFobs3$user_name <- trainingOrig[trainingOrig$X %in% trainingFobs2$X,"user_name"]
trainingOrig[trainingOrig$X %in% trainingFobs2$X,]$user_name
trainingOrig[trainingOrig$X %in% trainingFobs2$X,]$user_name
excludeInds
names(trainingOrig)[1:7]
plot(trainingOrig[[10]], col = trainingOrig$num_window)
plot(trainingOrig$gyros_dumbbell_x, col = trainingOrig$num_window)
plot(trainingOrig$gyros_dumbbell_y, col = trainingOrig$num_window)
plot(trainingOrig$gyros_dumbbell_z, col = trainingOrig$num_window)
plot(trainingFobs2[[1]], col = trainingFobs2$classe)
plot(trainingFobs2$gyros_dumbbell_x, col = trainingFobs2$classe)
plot(trainingOrig$gyros_dumbbell_x, col = trainingOrig$num_window)
plot(trainingFobs2[[1]], col = trainingFobs2$classe)
plot(trainingFobs2[[53]], col = trainingFobs2$classe)
plot(trainingFobs2[[52]], col = trainingFobs2$classe)
excludeInds[1:6]
excludeInds[8:length(excludeInds)]
names(trainingOrig)[1:7]
excludeInds2 <- c(excludeInds[1], excludeInds[3:length(excludeInds)]
)
excludeInds2
trainingFobs3a <- trainingOrig[,-excludeInds]
trainingFobs3 <- subset(trainingFobs, trainingFobs["gyros_forearm_y"] != 311)
plot(trainingFobs2[[52]], col = trainingFobs2$classe)
plot(trainingFobs3[[52]], col = trainingFobs3$classe)
plot(trainingFobs3[[52]], col = trainingFobs3$user_name)
names(trainingFobs3)[1:7]
tail(names(trainingFobs3))
trainingFobs3a <- trainingOrig[,-excludeInds2]
trainingFobs3 <- subset(trainingFobs3a, trainingFobs3a["gyros_forearm_y"] != 311)
plot(trainingFobs3[[52]], col = trainingFobs3$classe)
plot(trainingFobs3[[52]], col = trainingFobs3$user_name)
plot(trainingFobs3[[1]], col = trainingFobs3$user_name)
x <- 1
x <- x + 1
plot(trainingFobs3[[x]], col = trainingFobs3$user_name)
x <- x + 1
plot(trainingFobs3[[x]], col = trainingFobs3$user_name)
sd(trainingFobs2)
sapply(trainingFobs2, sd)
sd(trainingFob2$roll_belt)
sd(trainingFobs2$roll_belt)
mean(trainingFobs2$roll_belt)
hist(trainingFobs2$roll_belt)
hist(trainingFobs2$magnet_forearm_z)
?preProcess
nearZeroVar(trainingFobs3)
args(nearZeroVar)
nrow(trainingFobs3)
nzv2 <- nearZeroVar(trainingFobs3, saveMetrics=TRUE)
nzv2
names(getModelInfo())
modelLookup(ada)
modelLookup("ada")
getModelInfo("ada")
fit_f5_ada_Fobs3 <- train(classe ~ ., data = trainingFobs3[samplePer(trainingFobs3, 100),c(1:5, 53)], method = "ada")
names(trainingFobs3)
fit_f5_ada_Fobs3 <- train(classe ~ ., data = trainingFobs3[samplePer(trainingFobs3, 100),c(1:5, 54)], method = "ada")
install.packages("e1071")
library(ada)
fit_f5_ada_Fobs3 <- train(classe ~ ., data = trainingFobs3[samplePer(trainingFobs3, 100),c(1:5, 54)], method = "ada")
getModelInfo("ada")
fit_adaTest <- train(x = trainingFobs3[samplePer(trainingFobs3, 100),1:5], y = as.factor(trainingFobs$classe), method = "ada")
fit_adaTest <- train(x = trainingFobs3[samplePer(trainingFobs3, 100),1:5], y = as.factor(trainingFobs3$classe), method = "ada")
adaInds <- samplePer(trainingFobs3, 100)
fit_adaTest <- train(x = trainingFobs3[adaInds,1:5], y = as.factor(trainingFobs3[adaInds, "classe"), method = "ada")
fit_adaTest <- train(x = trainingFobs3[adaInds,1:5], y = as.factor(trainingFobs3[adaInds, "classe"]), method = "ada")
fit_adaTest <- train(x = trainingFobs3[adaInds,1:5], y = as.factor(trainingFobs3[adaInds, "classe"]), method = "ada", maxdepth = 3)
fit_adaTest <- train(x = trainingFobs3[adaInds,1:5], y = as.factor(trainingFobs3[adaInds, "classe"]), method = "ada", maxdepth = 1, nu = 0.1, iter = 50)
dir()
1.243
round(1.243 + 0.01)
as.character(1)
letter(1)
letters(1)
apropos("lett")
letters()
letters
letters[1]
letters[round(1.243 + 0.01)]
LETTERS[round(1.243 + 0.01)]
LETTERS[c(1,2)]
LETTERS[c(1,2,1)]
dir()
data(iris)
rm(training2)
rm(training)
rm(trainingFobs)
rm(trainingFobs3a)
rm(trainingFobs3)
inTrain <- createDataPartition(y = iris$Species, p = 0.7, list = FALSE)
irisTr <- iris[inTrain,]
irisTst <- iris[-inTrain,]
modFit <- train(Species~.,data=irisTr,method="rf",prox=TRUE)
modFit
class(iris$Species)
summary(modFit)
names(modFit)
modFit[[1]]
modFit[[2]]
names(modFit)
modFit[[3]]
modFit[[4]]
modFit[[5]]
modFit[[6]]
names(modFit)
modFit[[7]]
modFit[[8]]
modFit[[9]]
modFit[[10]]
names(modFit)
modFit[[11]]
names(modFit)
modFit[[12]]
modFit[[13]]
names(modFit)
modFit[[14]]
names(modFit)
modFit[[15]]
names(modFit)
modFit[[16]]
modFit[[17]]
modFit[[18]]
modFit[[19]]
modFit[[20]]
names(modFit)
modFit[[21]]
modFit[[22]]
predictors()
args(predictors)
?predictors
trainControl()
modFit
summary(modFit)
modFit$importance
modFit$inbag
modFit$oob.times
length(modFit$oob.times)
summary(modFit)
names(modFit)
modFit$call
modFit$coefnames
modFit$results
modFit$pred
modFit$trainingData
iri
iris
head(modFit$trainingData)
head(modFit$trainingData$.outcome)
ls()
nrow(trainingFobs2)
ls()
plot(trainingOrig$gyros_forearm_x, trainingOrig$gyros_forearm_y)
